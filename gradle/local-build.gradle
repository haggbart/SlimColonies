// Minimal Forge mod build configuration for SlimColonies
// Stripped down from the original ldtteam/OperaPublicaCreator script

apply plugin: 'java-library'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'


// Basic project info
group = project.modGroup
version = "${project.minecraftVersion}-${project.modVersion}"
base.archivesName = project.modId

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Source sets configuration
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir "src/datagen/generated/${project.modId}"
            // Exclude datagen cache files from resources
            exclude '.cache/**'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

minecraft {
    mappings channel: 'official', version: project.minecraftVersion

    // Enable access transformer if present
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Disable broken Farmer's Delight mixin in dev environment
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${project.modId}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${project.modId}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Disable broken Farmer's Delight mixin in dev environment
            property 'mixin.env.disableRefMap', 'true'

            args '--mod', project.modId, '--all', '--output', file("src/datagen/generated/${project.modId}"), '--existing', file('src/main/resources/'), '--existing-mod', 'structurize', '--existing-mod', 'domum_ornamentum'

            mods {
                "${project.modId}" {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    maven { url = 'https://maven.blamejared.com' } // JEI
    maven { url = 'https://jm.gserv.me/repository/maven-public/' } // JourneyMap
    maven { url = 'https://ldtteam.jfrog.io/artifactory/ldtteam/' } // MineColonies dependencies
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://mvnrepository.com/artifact/" }
    maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Minecraft and Forge
    minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"

    // Development annotations
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // Testing dependencies (optional)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

// Apply existing dependencies that we know work
apply from: 'gradle/dependencies.gradle'

// Process resources
processResources {
    filesMatching('META-INF/mods.toml') {
        expand([
                'modId'                 : project.modId,
                'modName'               : project.modId,
                'version'               : project.version,
                'minecraftVersion'      : project.minecraftVersion,
                'mcVersion'             : project.minecraftVersion,
                'forgeVersion'          : project.forgeVersion,
                'fml_range'             : project.fml_range,
                'forge_range'           : project.forge_range,
                'structurize_version'   : project.structurize_version,
                'blockUI_version'       : project.blockUI_version,
                'domumOrnamentumVersion': project.domumOrnamentumVersion,
                'jei_version'           : project.jei_version,
                'jmapVersion'           : project.jmapVersion
        ])
    }
}

// Single JAR configuration - no sources, javadoc, or slim variants
jar {
    from sourceSets.main.output

    manifest {
        attributes([
                "Specification-Title"     : project.modId,
                "Specification-Vendor"    : "monopixel",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modId,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "monopixel",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Configure all compilation tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
    options.forkOptions.jvmArgs = ['-Xmx1G']
}

// IntelliJ IDEA configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = false
    }
}
